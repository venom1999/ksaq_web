package com.kuangshan.riskcontrol.dao;

import com.kuangshan.riskcontrol.model.TestInfoT;
import com.kuangshan.riskcontrol.model.TestInfoTExample;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface TestInfoTMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    long countByExample(TestInfoTExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int deleteByExample(TestInfoTExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int deleteByPrimaryKey(Integer test_id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int insert(TestInfoT record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int insertSelective(TestInfoT record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    List<TestInfoT> selectByExample(TestInfoTExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    TestInfoT selectByPrimaryKey(Integer test_id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int updateByExampleSelective(@Param("record") TestInfoT record, @Param("example") TestInfoTExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int updateByExample(@Param("record") TestInfoT record, @Param("example") TestInfoTExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int updateByPrimaryKeySelective(TestInfoT record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_info_t
     *
     * @mbg.generated Sat Feb 29 11:50:20 CST 2020
     */
    int updateByPrimaryKey(TestInfoT record);

    /**
     * 获取表中全部信息
     * @return 表信息列表
     */
    List<TestInfoT> selectAll();

    Integer getLastTestID();

    int deleteMulTest(@Param("id_list")List<String> id_list);

    int deleteOneTest(@Param("test_id")Integer test_id);

    int setIsReleased(@Param("test_id")Integer test_id);

    int setMulReleased(@Param("id_list")List<String> id_list);

    List<Integer> getMulReleasedStatus(@Param("id_list") List<String> id_list);

    int isMakeUpByTID(@Param("test_id")Integer id);//在未绑定培训的情况下判断是否为补考

    int isMakeUpByECID(@Param("test_id")Integer id,@Param("education_id")Integer education_id);//再绑定培训的情况下判断是否为补考

    int hasMakeUpByRTID(@Param("related_test_id")Integer related_test_id);//在未绑定培训的情况下判断是否已经设置补考

    int hasMakeUpByECID(@Param("related_test_id")Integer related_test_id,@Param("education_id")Integer education_id);//在绑定培训的情况下判断是否已经设置补考

    //String getOnlineTypeByID(@Param("test_id")Integer test_id);

    //int getSubmittedState(@Param("test_id")Integer test_id);

    List<Integer> getMulSubmittedState(@Param("id_list") List<String> id_list);

    List<Map<String, Object>> getMulInfo(@Param("id_list") List<String> id_list);

    Map<String, Object> getPartInfoByID(@Param("test_id")Integer test_id);

    Map<String, Object> getSomeInfoByID(@Param("test_id")Integer test_id);

    //String getScoreModeByID(@Param("test_id")Integer id);

    //int getRelatedTestIDByTID(@Param("test_id")Integer test_id);

    List<Map<String, Object>> getSubmittedTest();


    List<Map<String, Object>> getMakeUpTestID(@Param("test_id")Integer test_id);//获取补考信息

    String getReleasedStatus(@Param("id")Integer id);

    Integer getEIDByTestID(@Param("id")Integer id);
}